import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';
import { PrismaService } from '../../prisma.service';
import { Prisma } from '@prisma/client';
import { CreateTemplateDto } from './dto/create-template.dto';
import { UpdateTemplateDto } from './dto/update-template.dto';
import { QueryTemplateDto } from './dto/query-template.dto';

type TemplateWithAuthor = Prisma.TemplateGetPayload<{
  include: { author: true };
}>;

@Injectable() { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';
import { PrismaService } from '../../prisma.service';
import { Prisma, Template, User, TemplateType } from '@prisma/client';
import { CreateTemplateDto } from './dto/create-template.dto';
import { UpdateTemplateDto } from './dto/update-template.dto';
import { QueryTemplateDto } from './dto/query-template.dto';

type TemplateWithAuthor = Template & {
  author: User | null;
};

@Injectable()
export class TemplatesService {
  constructor(private prisma: PrismaService) {}

  async findAll(query: QueryTemplateDto, userId?: string) {
    const { type, search, page = 1, limit = 10 } = query;
    const skip = (page - 1) * limit;

    const where: Prisma.TemplateWhereInput = {
      AND: [
        search ? {
          OR: [
            { name: { contains: search, mode: 'insensitive' } },
            { category: { contains: search, mode: 'insensitive' } },
          ],
        } : {},
        {
          OR: [
            { isPublic: true },
            { authorId: userId },
          ],
        },
      ],
    };

    if (type) {
      where.type = type;
    }

    const [templates, total] = await Promise.all([
      this.prisma.template.findMany({
        where,
        skip,
        take: limit,
        orderBy: { createdAt: 'desc' },
        include: { author: true },
      }),
      this.prisma.template.count({ where }),
    ]);

    return {
      items: templates,
      meta: {
        total,
        page,
        limit,
        pages: Math.ceil(total / limit),
      },
    };
  }

  async findOne(id: string, userId?: string): Promise<TemplateWithAuthor> {
    const template = await this.prisma.template.findUnique({
      where: { id },
      include: { author: true },
    });

    if (!template) {
      throw new NotFoundException('Template not found');
    }

    if (!template.isPublic && template.authorId !== userId) {
      throw new ForbiddenException('Access denied');
    }

    return template;
  }

  async create(data: CreateTemplateDto, userId: string): Promise<TemplateWithAuthor> {
    return this.prisma.template.create({
      data: {
        ...data,
        authorId: userId,
      },
      include: { author: true },
    });
  }

  async update(id: string, data: UpdateTemplateDto, userId: string): Promise<TemplateWithAuthor> {
    const template = await this.findOne(id, userId);

    if (!template.isPublic && template.authorId !== userId) {
      throw new ForbiddenException('Access denied');
    }

    return this.prisma.template.update({
      where: { id },
      data,
      include: { author: true },
    });
  }

  async remove(id: string, userId: string): Promise<{ message: string }> {
    const template = await this.findOne(id, userId);

    if (!template.isPublic && template.authorId !== userId) {
      throw new ForbiddenException('Access denied');
    }

    await this.prisma.template.delete({
      where: { id },
    });

    return { message: 'Template deleted successfully' };
  }

  // Email template specific methods
  async findEmailTemplate(name: string): Promise<TemplateWithAuthor | null> {
    return this.prisma.template.findFirst({
      where: {
        name,
        type: 'EMAIL',
      },
      include: { author: true },
    });
  }
}
